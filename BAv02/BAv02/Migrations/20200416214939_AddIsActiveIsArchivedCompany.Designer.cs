// <auto-generated />
using System;
using BAv02.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BAv02.Migrations
{
    [DbContext(typeof(BAV02Context))]
    [Migration("20200416214939_AddIsActiveIsArchivedCompany")]
    partial class AddIsActiveIsArchivedCompany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BAv02.Models.AccidentRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAccident")
                        .HasColumnType("date");

                    b.Property<string>("Fatalities")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("IdDriver");

                    b.Property<string>("Injuries")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NatureAccident")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AccidentRecord","DF");
                });

            modelBuilder.Entity("BAv02.Models.AccidentRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AccidentDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("AccidentHour")
                        .HasColumnType("time(0)");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<int?>("Fatalities");

                    b.Property<bool?>("Hm")
                        .HasColumnName("Hm");

                    b.Property<long?>("IdCity");

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdDriver");

                    b.Property<long?>("IdState");

                    b.Property<int?>("Injuries");

                    b.Property<string>("ReportNumber")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdDriver");

                    b.ToTable("AccidentRegister","AC");
                });

            modelBuilder.Entity("BAv02.Models.AnnualDmvreview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateReview")
                        .HasColumnType("date");

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdDriver");

                    b.Property<string>("MotorCarrier")
                        .HasMaxLength(200);

                    b.Property<bool?>("QuestionA");

                    b.Property<bool?>("QuestionB");

                    b.HasKey("Id");

                    b.ToTable("AnnualDMVReview","DF");
                });

            modelBuilder.Entity("BAv02.Models.AnnualDriversCertification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("date");

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdDriver");

                    b.Property<string>("Location")
                        .HasMaxLength(150);

                    b.Property<string>("Offense")
                        .HasMaxLength(200);

                    b.Property<string>("Status")
                        .HasMaxLength(15);

                    b.Property<string>("TypeVehicleOperated")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ViolationDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("AnnualDriversCertification","DF");
                });

            modelBuilder.Entity("BAv02.Models.CargoClassification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("A");

                    b.Property<bool?>("Aa")
                        .HasColumnName("AA");

                    b.Property<bool?>("B");

                    b.Property<bool?>("Bb")
                        .HasColumnName("BB");

                    b.Property<bool?>("C");

                    b.Property<bool?>("Cc")
                        .HasColumnName("CC");

                    b.Property<bool?>("D");

                    b.Property<bool?>("Dd")
                        .HasColumnName("DD");

                    b.Property<bool?>("E");

                    b.Property<bool?>("F");

                    b.Property<bool?>("G");

                    b.Property<bool?>("H");

                    b.Property<bool?>("I");

                    b.Property<long?>("IdCompany");

                    b.Property<bool?>("J");

                    b.Property<bool?>("K");

                    b.Property<bool?>("L");

                    b.Property<bool?>("M");

                    b.Property<bool?>("N");

                    b.Property<bool?>("O");

                    b.Property<string>("Other")
                        .HasMaxLength(200);

                    b.Property<bool?>("P");

                    b.Property<bool?>("PassengerCertificate");

                    b.Property<bool?>("Q");

                    b.Property<bool?>("R");

                    b.Property<bool?>("S");

                    b.Property<bool?>("T");

                    b.Property<bool?>("U");

                    b.Property<bool?>("V");

                    b.Property<bool?>("W");

                    b.Property<bool?>("X");

                    b.Property<bool?>("Y");

                    b.Property<bool?>("Z");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("CargoClassification","MCS150");
                });

            modelBuilder.Entity("BAv02.Models.CertificateEnrollment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateEnrollment1")
                        .HasColumnName("CertificateEnrollment")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("date");

                    b.Property<long?>("IdCompany");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("CertificateEnrollment","DT");
                });

            modelBuilder.Entity("BAv02.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("City","AC");
                });

            modelBuilder.Entity("BAv02.Models.CollectionSite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("AlternateBussinessIdentifier")
                        .HasMaxLength(250);

                    b.Property<long?>("ArchivedByUserId");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(250);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(250);

                    b.Property<string>("Fein")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsArchived");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(250);

                    b.Property<long?>("ProviderId");

                    b.HasKey("Id");

                    b.ToTable("CollectionSite","DT");
                });

            modelBuilder.Entity("BAv02.Models.Collector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<bool?>("AlcoholTestingAllowed");

                    b.Property<long?>("ArchivedByUserId");

                    b.Property<long?>("CollectionSiteId");

                    b.Property<DateTime?>("DateArchived");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(50);

                    b.Property<bool?>("DrugTestingAllow");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsArchived");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Collector","DT");
                });

            modelBuilder.Entity("BAv02.Models.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("date");

                    b.Property<string>("CarrierOperation")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DbaName")
                        .HasMaxLength(200);

                    b.Property<string>("Der")
                        .HasColumnName("DER")
                        .HasMaxLength(100);

                    b.Property<string>("Dot")
                        .HasMaxLength(12);

                    b.Property<int?>("DriverTotal");

                    b.Property<string>("DrugsPolicy")
                        .HasMaxLength(25);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool?>("Hazmat");

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("LegalName")
                        .HasMaxLength(200);

                    b.Property<string>("LlaveCfdi")
                        .HasMaxLength(100);

                    b.Property<string>("MailAddress")
                        .HasMaxLength(300);

                    b.Property<long?>("MailCity");

                    b.Property<long?>("MailCountry");

                    b.Property<long?>("MailState");

                    b.Property<string>("MailZip")
                        .HasMaxLength(7);

                    b.Property<string>("McMx")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Mcs150Date")
                        .HasColumnType("date");

                    b.Property<string>("Mcs150Mileage")
                        .HasMaxLength(100);

                    b.Property<string>("Mcs150Myear")
                        .HasColumnName("Mcs150MYear")
                        .HasMaxLength(100);

                    b.Property<string>("MovilPhone")
                        .HasMaxLength(25);

                    b.Property<string>("PasswordSat")
                        .HasColumnName("PasswordSAT")
                        .HasMaxLength(50);

                    b.Property<string>("PcFlag")
                        .HasMaxLength(1);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<string>("PhysicalAddress")
                        .HasMaxLength(300);

                    b.Property<long?>("PhysicalCity");

                    b.Property<long?>("PhysicalCountry");

                    b.Property<long?>("PhysicalState");

                    b.Property<string>("PhysicalStatus")
                        .HasMaxLength(10);

                    b.Property<string>("PhysicalZip")
                        .HasMaxLength(11);

                    b.Property<string>("Pinnumber")
                        .HasColumnName("PINNumber")
                        .HasMaxLength(20);

                    b.Property<int?>("Powerunit");

                    b.Property<string>("Regimen")
                        .HasMaxLength(20);

                    b.Property<string>("Region")
                        .HasMaxLength(15);

                    b.Property<string>("Rfc")
                        .HasMaxLength(14);

                    b.Property<string>("Rsocial")
                        .HasMaxLength(200);

                    b.Property<string>("Saat")
                        .HasMaxLength(10);

                    b.Property<string>("ScacCode")
                        .HasMaxLength(10);

                    b.Property<string>("SelloCfdi")
                        .HasMaxLength(100);

                    b.Property<string>("StateNumber")
                        .HasMaxLength(12);

                    b.Property<string>("Tax")
                        .HasMaxLength(16);

                    b.Property<string>("Tcompany")
                        .HasColumnName("TCompany")
                        .HasMaxLength(15);

                    b.Property<string>("Title")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<string>("UserSat")
                        .HasColumnName("UserSAT")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Company","AC");
                });

            modelBuilder.Entity("BAv02.Models.CompanyAlerts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdCompany");

                    b.Property<string>("Message")
                        .HasMaxLength(100);

                    b.Property<string>("Severy")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("CompanyAlerts","AC");
                });

            modelBuilder.Entity("BAv02.Models.CompanyDocs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionDoc")
                        .HasMaxLength(100);

                    b.Property<string>("DocName")
                        .HasMaxLength(100);

                    b.Property<string>("DocType")
                        .HasMaxLength(40);

                    b.Property<long?>("IdAccidentRegister");

                    b.Property<long?>("IdCompany");

                    b.HasKey("Id");

                    b.HasIndex("IdAccidentRegister");

                    b.ToTable("CompanyDocs","AC");
                });

            modelBuilder.Entity("BAv02.Models.CompanyUsersRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("date");

                    b.Property<long>("IdCompany");

                    b.Property<long>("IdUser");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Type")
                        .HasMaxLength(15);

                    b.Property<string>("UserPermits")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("CompanyUsersRoles","AC");
                });

            modelBuilder.Entity("BAv02.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Country","AC");
                });

            modelBuilder.Entity("BAv02.Models.Crash", b =>
                {
                    b.Property<long>("IdCrash")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idCrash")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessControlDesc")
                        .HasMaxLength(30);

                    b.Property<string>("CitationIssuedDesc")
                        .HasMaxLength(10);

                    b.Property<string>("DotNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<byte>("Fatalities");

                    b.Property<string>("HazmatReleased")
                        .HasMaxLength(1);

                    b.Property<byte>("Injuries");

                    b.Property<string>("LightConditionDesc")
                        .HasMaxLength(40);

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("date");

                    b.Property<string>("ReportNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<byte>("ReportSeqNo");

                    b.Property<string>("ReportState")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("RoadSurfaceConditionDesc")
                        .HasMaxLength(30);

                    b.Property<byte>("SeqNum");

                    b.Property<byte?>("SeverityWeight");

                    b.Property<byte?>("TimeWeight");

                    b.Property<string>("TowAway")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("TrafficDesc")
                        .HasMaxLength(50);

                    b.Property<string>("VehicleLinceseNumber")
                        .HasMaxLength(10);

                    b.Property<string>("VehicleLinceseState")
                        .HasMaxLength(4);

                    b.Property<string>("Vin")
                        .HasMaxLength(20);

                    b.Property<string>("WeatherConditionDesc")
                        .HasMaxLength(30);

                    b.HasKey("IdCrash");

                    b.ToTable("Crash","AC");
                });

            modelBuilder.Entity("BAv02.Models.Dmv", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dmv1")
                        .HasColumnName("DMV")
                        .HasMaxLength(15);

                    b.Property<string>("DmvFileName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<long?>("IdDriver")
                        .HasColumnName("idDriver");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("DMV","DF");
                });

            modelBuilder.Entity("BAv02.Models.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusCarrier")
                        .HasMaxLength(15);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(25);

                    b.Property<long>("CountryLicense");

                    b.Property<string>("DeniedLicense")
                        .HasMaxLength(2);

                    b.Property<string>("DeniedLicenseComments")
                        .HasMaxLength(200);

                    b.Property<string>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasMaxLength(35);

                    b.Property<string>("Fast")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("FastExp")
                        .HasColumnType("date");

                    b.Property<long?>("IdUser");

                    b.Property<string>("License")
                        .HasMaxLength(12);

                    b.Property<DateTime?>("LicenseExpiration")
                        .HasColumnType("date");

                    b.Property<string>("LicenseFile")
                        .HasMaxLength(50);

                    b.Property<string>("LicenseSuspended")
                        .HasMaxLength(2);

                    b.Property<string>("LicenseSuspendedComments")
                        .HasMaxLength(200);

                    b.Property<string>("MxTag")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("MxTagExp")
                        .HasColumnType("date");

                    b.Property<bool?>("QuestionBeyond");

                    b.Property<bool?>("QuestionDa")
                        .HasColumnName("QuestionDA");

                    b.Property<bool?>("QuestionDmv")
                        .HasColumnName("QuestionDMV");

                    b.Property<bool?>("QuestionDr")
                        .HasColumnName("QuestionDR");

                    b.Property<bool?>("QuestionHm")
                        .HasColumnName("QuestionHm");

                    b.Property<bool?>("QuestionHs")
                        .HasColumnName("QuestionHS");

                    b.Property<bool?>("QuestionInterstate");

                    b.Property<bool?>("QuestionIntrastate");

                    b.Property<bool?>("QuestionWithin");

                    b.Property<string>("Roadtest")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("RoadtestDate")
                        .HasColumnType("date");

                    b.Property<string>("Ssn")
                        .HasMaxLength(15);

                    b.Property<long?>("StateLicense");

                    b.Property<string>("Status")
                        .HasMaxLength(10);

                    b.Property<bool?>("StatusWork");

                    b.Property<string>("Twic")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("TwicExp")
                        .HasColumnType("date");

                    b.Property<string>("TypeLicense")
                        .HasMaxLength(20);

                    b.Property<string>("TypeTrailer")
                        .HasMaxLength(15);

                    b.Property<string>("UsaTag")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("UsaTagExp")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Driver","DF");
                });

            modelBuilder.Entity("BAv02.Models.DriverAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("CurrentAddress");

                    b.Property<DateTime>("DateOf")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("date");

                    b.Property<string>("HowLong")
                        .HasMaxLength(50);

                    b.Property<long?>("IdCity");

                    b.Property<long>("IdDriver");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("DriverAddress","DF");
                });

            modelBuilder.Entity("BAv02.Models.DriverAlerts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdDriver");

                    b.Property<string>("Message")
                        .HasMaxLength(50);

                    b.Property<string>("Severy")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("DriverAlerts","DF");
                });

            modelBuilder.Entity("BAv02.Models.DriverDocs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateReceipt")
                        .HasColumnType("date");

                    b.Property<string>("DescriptionDoc")
                        .HasMaxLength(40);

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("IdDriver");

                    b.HasKey("Id");

                    b.ToTable("DriverDocs","DF");
                });

            modelBuilder.Entity("BAv02.Models.DrivingExperience", b =>
                {
                    b.Property<long>("IdDexperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassEquipment")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("date");

                    b.Property<long>("IdDriver")
                        .HasColumnName("idDriver");

                    b.Property<string>("TotalMilesDriven")
                        .HasMaxLength(200);

                    b.Property<string>("TypeEquipment")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("IdDexperience");

                    b.ToTable("DrivingExperience","DF");
                });

            modelBuilder.Entity("BAv02.Models.DrugAlcoholCompliance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateApplication")
                        .HasColumnType("date");

                    b.Property<string>("Form")
                        .HasMaxLength(17);

                    b.Property<long?>("IdDriver");

                    b.Property<string>("Reason")
                        .HasMaxLength(30);

                    b.Property<string>("Result")
                        .HasMaxLength(9);

                    b.Property<string>("ResultFile")
                        .HasMaxLength(50);

                    b.Property<string>("Specimen")
                        .HasMaxLength(15);

                    b.Property<string>("TypeTest")
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("DrugAlcoholCompliance","DF");
                });

            modelBuilder.Entity("BAv02.Models.DrugTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CollectionRemarks")
                        .HasMaxLength(100);

                    b.Property<bool?>("CollectorCertification");

                    b.Property<string>("CollectorSignature")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateTimeCollectionCollector")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTimeCollectionDriver")
                        .HasColumnType("datetime");

                    b.Property<string>("DonorSignature")
                        .HasMaxLength(50);

                    b.Property<bool?>("DriverCertification")
                        .HasColumnName("driverCertification");

                    b.Property<long?>("IdDrugAlcoholCompliance");

                    b.Property<long?>("IdScheduleDrugTest");

                    b.Property<string>("IssuesCollection")
                        .HasMaxLength(50);

                    b.Property<string>("IssuesCollectionRemarks")
                        .HasMaxLength(100);

                    b.Property<string>("ReleasedTo")
                        .HasMaxLength(50);

                    b.Property<string>("RemarksIdentification")
                        .HasMaxLength(100);

                    b.Property<string>("SpecimenNumber")
                        .HasMaxLength(15);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("TemperatureRemarks")
                        .HasMaxLength(100);

                    b.Property<string>("TypeCollection")
                        .HasMaxLength(15);

                    b.Property<bool?>("ValidIdentification");

                    b.Property<bool?>("ValidTemperature");

                    b.HasKey("Id");

                    b.HasIndex("IdDrugAlcoholCompliance");

                    b.HasIndex("IdScheduleDrugTest");

                    b.ToTable("DrugTest","DT");
                });

            modelBuilder.Entity("BAv02.Models.EmployerPullNotice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateReview")
                        .HasColumnType("date");

                    b.Property<string>("DriverLicense")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("IdDriver");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("date");

                    b.Property<string>("RequesterCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ReviewedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Violations")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.HasKey("Id");

                    b.HasIndex("IdDriver");

                    b.ToTable("EmployerPullNotice","DF");
                });

            modelBuilder.Entity("BAv02.Models.EmploymentApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(300);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DriverDob")
                        .HasColumnName("DriverDOB")
                        .HasColumnType("date");

                    b.Property<string>("DriverLastName")
                        .HasMaxLength(50);

                    b.Property<string>("DriverName")
                        .HasMaxLength(50);

                    b.Property<string>("FileSignatureD");

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdDriver");

                    b.Property<string>("License")
                        .HasMaxLength(12);

                    b.Property<string>("QuestionA")
                        .HasMaxLength(2);

                    b.Property<string>("QuestionB")
                        .HasMaxLength(2);

                    b.Property<string>("Ssn")
                        .HasMaxLength(15);

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<string>("StateLicense")
                        .HasMaxLength(100);

                    b.Property<string>("TypeLicense")
                        .HasMaxLength(20);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EmploymentApplication","DF");
                });

            modelBuilder.Entity("BAv02.Models.EmploymentHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Application")
                        .HasColumnType("date");

                    b.Property<byte?>("Attitude");

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<byte?>("Cooperation");

                    b.Property<DateTime?>("DateMailed")
                        .HasColumnType("date");

                    b.Property<string>("DriverName")
                        .HasMaxLength(100);

                    b.Property<byte?>("Driving");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdDriver")
                        .HasColumnName("idDriver");

                    b.Property<long?>("IdEmploymentRecord")
                        .HasColumnName("idEmploymentRecord");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("NewEmployerAddress")
                        .HasMaxLength(500);

                    b.Property<string>("NewEmployerName")
                        .HasMaxLength(200);

                    b.Property<byte?>("Personal");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<string>("ProspectiveSignature");

                    b.Property<byte?>("Quality");

                    b.Property<byte?>("Question1");

                    b.Property<byte?>("Question2");

                    b.Property<byte?>("Question3");

                    b.Property<byte?>("Question4");

                    b.Property<byte?>("Question5");

                    b.Property<byte?>("Question6");

                    b.Property<byte?>("Question7");

                    b.Property<byte?>("Question8");

                    b.Property<byte?>("Question9");

                    b.Property<string>("RemarkQuestion6")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasMaxLength(50);

                    b.Property<byte?>("Safety");

                    b.Property<string>("Signature");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmploymentHistory","DF");
                });

            modelBuilder.Entity("BAv02.Models.EmploymentRecords", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("City");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("IdDriver");

                    b.Property<string>("Leaving")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PositionHeld")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Salary")
                        .HasMaxLength(20);

                    b.Property<long?>("State");

                    b.Property<bool>("SubjectToRegulation");

                    b.Property<bool>("SubjectToTesting");

                    b.Property<string>("Telephone")
                        .HasMaxLength(25);

                    b.Property<string>("Zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("EmploymentRecords","DF");
                });

            modelBuilder.Entity("BAv02.Models.HazardMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HazardMaterialClasification")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("HazardMaterial","MCS150");
                });

            modelBuilder.Entity("BAv02.Models.HazardMaterialCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BulkHm")
                        .HasColumnName("BulkHm");

                    b.Property<bool?>("Carrier");

                    b.Property<long?>("IdCompany");

                    b.Property<int>("IdHazardMaterial");

                    b.Property<bool?>("NonBulk");

                    b.Property<bool?>("Shipper");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdHazardMaterial");

                    b.ToTable("HazardMaterialCompany","MCS150");
                });

            modelBuilder.Entity("BAv02.Models.HazardMaterialOptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Anystates")
                        .HasColumnName("ANYSTATES");

                    b.Property<string>("Cfr")
                        .HasColumnName("CFR")
                        .HasMaxLength(255);

                    b.Property<bool?>("Cfr485")
                        .HasColumnName("CFR485");

                    b.Property<string>("Hmsafety")
                        .HasColumnName("Hmsafety")
                        .HasMaxLength(8);

                    b.Property<bool?>("Hrcq")
                        .HasColumnName("HRCQ");

                    b.Property<long?>("IdCompany");

                    b.Property<bool?>("QuantityofDivision");

                    b.Property<bool?>("Shipment");

                    b.Property<bool?>("Tih")
                        .HasColumnName("TIH");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("HazardMaterialOptions","MCS150");
                });

            modelBuilder.Entity("BAv02.Models.HazardMaterialStates", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Ak")
                        .HasColumnName("AK");

                    b.Property<bool?>("Al")
                        .HasColumnName("AL");

                    b.Property<bool?>("Ar")
                        .HasColumnName("AR");

                    b.Property<bool?>("Az")
                        .HasColumnName("AZ");

                    b.Property<bool?>("Ca")
                        .HasColumnName("CA");

                    b.Property<bool?>("Co")
                        .HasColumnName("CO");

                    b.Property<bool?>("Ct")
                        .HasColumnName("CT");

                    b.Property<bool?>("Dc")
                        .HasColumnName("DC");

                    b.Property<bool?>("De")
                        .HasColumnName("DE");

                    b.Property<bool?>("Fl")
                        .HasColumnName("FL");

                    b.Property<bool?>("Ga")
                        .HasColumnName("GA");

                    b.Property<bool?>("Hi")
                        .HasColumnName("HI");

                    b.Property<bool?>("Ia")
                        .HasColumnName("IA");

                    b.Property<long?>("IdCompany");

                    b.Property<bool?>("Idaho");

                    b.Property<bool?>("Il")
                        .HasColumnName("IL");

                    b.Property<bool?>("Indiana");

                    b.Property<bool?>("Ks")
                        .HasColumnName("KS");

                    b.Property<bool?>("Ky")
                        .HasColumnName("KY");

                    b.Property<bool?>("La")
                        .HasColumnName("LA");

                    b.Property<bool?>("Ma")
                        .HasColumnName("MA");

                    b.Property<bool?>("Md")
                        .HasColumnName("MD");

                    b.Property<bool?>("Me")
                        .HasColumnName("ME");

                    b.Property<bool?>("Mi")
                        .HasColumnName("MI");

                    b.Property<bool?>("Mn")
                        .HasColumnName("MN");

                    b.Property<bool?>("Mo")
                        .HasColumnName("MO");

                    b.Property<bool?>("Ms")
                        .HasColumnName("MS");

                    b.Property<bool?>("Mt")
                        .HasColumnName("MT");

                    b.Property<bool?>("Nc")
                        .HasColumnName("NC");

                    b.Property<bool?>("Nd")
                        .HasColumnName("ND");

                    b.Property<bool?>("Ne")
                        .HasColumnName("NE");

                    b.Property<bool?>("Nh")
                        .HasColumnName("NH");

                    b.Property<bool?>("Nj")
                        .HasColumnName("NJ");

                    b.Property<bool?>("Nm")
                        .HasColumnName("NM");

                    b.Property<bool?>("Nv")
                        .HasColumnName("NV");

                    b.Property<bool?>("Ny")
                        .HasColumnName("NY");

                    b.Property<bool?>("Oh")
                        .HasColumnName("OH");

                    b.Property<bool?>("Ok")
                        .HasColumnName("OK");

                    b.Property<bool?>("Oregon");

                    b.Property<bool?>("Pa")
                        .HasColumnName("PA");

                    b.Property<bool?>("Pr")
                        .HasColumnName("PR");

                    b.Property<bool?>("Ri")
                        .HasColumnName("RI");

                    b.Property<bool?>("Sc")
                        .HasColumnName("SC");

                    b.Property<bool?>("Sd")
                        .HasColumnName("SD");

                    b.Property<bool?>("Tn")
                        .HasColumnName("TN");

                    b.Property<bool?>("Tx")
                        .HasColumnName("TX");

                    b.Property<bool?>("Ut")
                        .HasColumnName("UT");

                    b.Property<bool?>("Va")
                        .HasColumnName("VA");

                    b.Property<bool?>("Vt")
                        .HasColumnName("VT");

                    b.Property<bool?>("Wa")
                        .HasColumnName("WA");

                    b.Property<bool?>("Wi")
                        .HasColumnName("WI");

                    b.Property<bool?>("Wv")
                        .HasColumnName("WV");

                    b.Property<bool?>("Wy")
                        .HasColumnName("WY");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("HazardMaterialStates","MCS150");
                });

            modelBuilder.Entity("BAv02.Models.Inspection", b =>
                {
                    b.Property<string>("UniqueId")
                        .HasMaxLength(20);

                    b.Property<byte?>("BasicViol");

                    b.Property<string>("CountryCodeState")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("DotNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("DrFitnessInsp")
                        .HasMaxLength(1);

                    b.Property<byte?>("DrFitnessViol");

                    b.Property<byte>("DriverOosTotal");

                    b.Property<string>("FatiguedInsp")
                        .HasMaxLength(1);

                    b.Property<byte?>("FatiguedViol");

                    b.Property<byte>("HazmatOosTotal");

                    b.Property<string>("HazmatPlacardReq")
                        .HasMaxLength(1);

                    b.Property<string>("HmInsp")
                        .HasMaxLength(1);

                    b.Property<byte?>("HmViol");

                    b.Property<DateTime>("InspDate")
                        .HasColumnType("date");

                    b.Property<string>("InspLevelId")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<byte>("OosTotal");

                    b.Property<string>("ReportNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("ReportState")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("SubtAlcoholInsp")
                        .HasMaxLength(1);

                    b.Property<byte?>("SubtAlcoholViol");

                    b.Property<string>("TimeWeight")
                        .HasMaxLength(255);

                    b.Property<byte>("TotalHazmatSent");

                    b.Property<string>("UnitDecalNumber")
                        .HasMaxLength(10);

                    b.Property<string>("UnitDecalNumber2")
                        .HasMaxLength(10);

                    b.Property<string>("UnitLicense")
                        .HasMaxLength(15);

                    b.Property<string>("UnitLicense2")
                        .HasMaxLength(15);

                    b.Property<string>("UnitLicenseStae")
                        .HasMaxLength(4);

                    b.Property<string>("UnitLicenseState2")
                        .HasMaxLength(4);

                    b.Property<string>("UnitMake")
                        .HasMaxLength(10);

                    b.Property<string>("UnitMake2")
                        .HasMaxLength(10);

                    b.Property<string>("UnitTypeDesc")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("UnitTypeDesc2")
                        .HasMaxLength(20);

                    b.Property<string>("UnsafeInsp")
                        .HasMaxLength(1);

                    b.Property<byte?>("UnsafeViol");

                    b.Property<string>("VHmaintInsp")
                        .HasMaxLength(1);

                    b.Property<byte?>("VHmaintViol");

                    b.Property<byte>("VehicleOosTotal");

                    b.Property<string>("Vin")
                        .HasMaxLength(20);

                    b.Property<string>("Vin2")
                        .HasMaxLength(20);

                    b.HasKey("UniqueId");

                    b.ToTable("Inspection","MT");
                });

            modelBuilder.Entity("BAv02.Models.LetterInquiry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<string>("CompletedByName")
                        .HasMaxLength(100);

                    b.Property<string>("CompletedBySignature");

                    b.Property<string>("CompletedByTitle")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateMailed")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("date");

                    b.Property<string>("DriverName")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdDriver");

                    b.Property<long?>("IdEmployeeRecord");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("NewEmployerAddress")
                        .HasMaxLength(500);

                    b.Property<string>("NewEmployerName")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<bool?>("Question1");

                    b.Property<bool?>("Question2");

                    b.Property<bool?>("Question3");

                    b.Property<bool?>("Question4");

                    b.Property<bool?>("Question5");

                    b.Property<string>("SapphoneNumber")
                        .HasColumnName("SAPPhoneNumber")
                        .HasMaxLength(25);

                    b.Property<bool?>("Section382");

                    b.Property<string>("Signature");

                    b.HasKey("Id");

                    b.ToTable("LetterInquiry","DF");
                });

            modelBuilder.Entity("BAv02.Models.MaintenanceAlerts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdVehicle");

                    b.Property<string>("Message")
                        .HasMaxLength(50);

                    b.Property<string>("Severy")
                        .HasMaxLength(30);

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("MaintenanceAlerts","MT");
                });

            modelBuilder.Entity("BAv02.Models.MaintenanceDocs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionDoc")
                        .HasMaxLength(100);

                    b.Property<string>("DocName")
                        .HasMaxLength(100);

                    b.Property<string>("DocType")
                        .HasMaxLength(40);

                    b.Property<long?>("IdVehicle");

                    b.Property<string>("TypeId")
                        .HasMaxLength(10);

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("MaintenanceDocs","MT");
                });

            modelBuilder.Entity("BAv02.Models.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cost")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<long>("IdWorkOrder");

                    b.Property<string>("InvoiceFile")
                        .IsRequired()
                        .HasColumnName("invoiceFile")
                        .HasMaxLength(50);

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("IdWorkOrder");

                    b.ToTable("Material","MT");
                });

            modelBuilder.Entity("BAv02.Models.MedicalCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<long?>("IdDriver");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("MedicalCertificateId")
                        .HasColumnName("MedicalCertificateID")
                        .HasMaxLength(15);

                    b.Property<string>("MedicalFile")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MedicalCertificate","DF");
                });

            modelBuilder.Entity("BAv02.Models.OperationClassification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("A");

                    b.Property<bool?>("B");

                    b.Property<bool?>("C");

                    b.Property<bool?>("D");

                    b.Property<bool?>("E");

                    b.Property<bool?>("F");

                    b.Property<bool?>("G");

                    b.Property<bool?>("H");

                    b.Property<bool?>("I");

                    b.Property<long?>("IdCompany");

                    b.Property<bool?>("J");

                    b.Property<bool?>("K");

                    b.Property<bool?>("L");

                    b.Property<string>("Other")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("OperationClassification","MCS150");
                });

            modelBuilder.Entity("BAv02.Models.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("AlternateBussinessIdentifier")
                        .HasMaxLength(250);

                    b.Property<long?>("ArchivedByUserId");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(250);

                    b.Property<string>("Fein")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsArchived")
                        .HasColumnName("isArchived");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Provider","DT");
                });

            modelBuilder.Entity("BAv02.Models.Reaaddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdDaddress")
                        .HasColumnName("IdDAddress");

                    b.Property<long?>("IdEmploymentAplication");

                    b.HasKey("Id");

                    b.HasIndex("IdDaddress");

                    b.HasIndex("IdEmploymentAplication");

                    b.ToTable("REAAddress","DF");
                });

            modelBuilder.Entity("BAv02.Models.Readexperience", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdDrivingExperience");

                    b.Property<long?>("IdEmploymentAplication");

                    b.HasKey("Id");

                    b.HasIndex("IdDrivingExperience");

                    b.HasIndex("IdEmploymentAplication");

                    b.ToTable("READExperience","DF");
                });

            modelBuilder.Entity("BAv02.Models.Reaerecords", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdEmploymentAplication");

                    b.Property<long?>("IdEmploymentRecords");

                    b.HasKey("Id");

                    b.HasIndex("IdEmploymentAplication");

                    b.HasIndex("IdEmploymentRecords");

                    b.ToTable("REAERecords","DF");
                });

            modelBuilder.Entity("BAv02.Models.Rearaccident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdDraccident")
                        .HasColumnName("IdDRAccident");

                    b.Property<long?>("IdEmploymentAplication");

                    b.HasKey("Id");

                    b.HasIndex("IdDraccident");

                    b.HasIndex("IdEmploymentAplication");

                    b.ToTable("REARAccident","DF");
                });

            modelBuilder.Entity("BAv02.Models.Reatconvictions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdEaplication")
                        .HasColumnName("IdEAplication");

                    b.Property<long?>("IdTrafficConvictions");

                    b.HasKey("Id");

                    b.HasIndex("IdEaplication");

                    b.HasIndex("IdTrafficConvictions");

                    b.ToTable("REATConvictions","DF");
                });

            modelBuilder.Entity("BAv02.Models.RoadTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassEquipment")
                        .HasMaxLength(200);

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(455);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("DateC")
                        .HasColumnType("date");

                    b.Property<string>("DriverName")
                        .HasMaxLength(100);

                    b.Property<string>("FileSignatureDer");

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdDriver");

                    b.Property<string>("License")
                        .HasMaxLength(12);

                    b.Property<string>("Ssn")
                        .HasMaxLength(15);

                    b.Property<string>("StateLicense")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("TypeBus")
                        .HasMaxLength(200);

                    b.Property<string>("TypeEquipment")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IdDriver");

                    b.ToTable("RoadTest","DF");
                });

            modelBuilder.Entity("BAv02.Models.ScheduleDrugTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelDetails")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DateTimeExpiration")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTimeTest")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FederalTest");

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdDriver");

                    b.Property<string>("Lab")
                        .HasMaxLength(50);

                    b.Property<string>("Performed")
                        .HasMaxLength(25);

                    b.Property<string>("Provider")
                        .HasMaxLength(50);

                    b.Property<string>("Reason")
                        .HasMaxLength(30);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("StepProcessCode")
                        .HasMaxLength(50);

                    b.Property<string>("TestingAuthority")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("IdDriver");

                    b.ToTable("ScheduleDrugTest","DT");
                });

            modelBuilder.Entity("BAv02.Models.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateWorkOrderClosed")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<long>("IdWorkOrder");

                    b.Property<string>("ServiceDue")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("IdWorkOrder");

                    b.ToTable("Service","MT");
                });

            modelBuilder.Entity("BAv02.Models.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<long>("IdCountry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("State","AC");
                });

            modelBuilder.Entity("BAv02.Models.SuperAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModifed")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<bool?>("IsAchived")
                        .HasColumnName("isAchived");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("SuperAdmin","DT");
                });

            modelBuilder.Entity("BAv02.Models.SupervisorTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasMaxLength(25);

                    b.Property<long?>("IdCompany");

                    b.Property<string>("SupervisorsName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("TrainingDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("SupervisorTraining","DT");
                });

            modelBuilder.Entity("BAv02.Models.TrafficConvictions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Change")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("ConvictionDate")
                        .HasColumnType("date");

                    b.Property<long>("IdDriver")
                        .HasColumnName("idDriver");

                    b.Property<string>("Locations")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Penalty")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TrafficConvictions","AC");
                });

            modelBuilder.Entity("BAv02.Models.Trailer", b =>
                {
                    b.Property<long>("IdTrailer")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("money");

                    b.Property<string>("Engine")
                        .HasMaxLength(20);

                    b.Property<string>("FileImage")
                        .HasMaxLength(50);

                    b.Property<string>("FuelType")
                        .HasMaxLength(20);

                    b.Property<bool?>("Hazmat");

                    b.Property<long?>("IdCompany");

                    b.Property<DateTime?>("InServiceDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InsuranceExpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("InsuranceName")
                        .HasMaxLength(100);

                    b.Property<string>("Make")
                        .HasMaxLength(20);

                    b.Property<string>("Miles")
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .HasMaxLength(20);

                    b.Property<string>("OperationRadius")
                        .HasMaxLength(7);

                    b.Property<string>("OtherInsurance")
                        .HasMaxLength(100);

                    b.Property<string>("Ownership")
                        .HasMaxLength(20);

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("PlateExpiration")
                        .HasColumnType("datetime");

                    b.Property<long?>("PlateState");

                    b.Property<string>("PolicyTerm")
                        .HasMaxLength(20);

                    b.Property<string>("PortEntry")
                        .HasMaxLength(100);

                    b.Property<string>("Sct")
                        .HasColumnName("SCT")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Sctexpiration")
                        .HasColumnName("SCTExpiration")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(15);

                    b.Property<int?>("TireSize");

                    b.Property<string>("TrailerNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TrailerType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("VerificationNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("VerificationNumberExpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("Weight");

                    b.Property<string>("Year")
                        .HasMaxLength(4);

                    b.HasKey("IdTrailer");

                    b.ToTable("Trailer","MT");
                });

            modelBuilder.Entity("BAv02.Models.UsDot", b =>
                {
                    b.Property<string>("DotNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("date");

                    b.Property<string>("CarrierOperation")
                        .HasMaxLength(1);

                    b.Property<string>("DbaName")
                        .HasMaxLength(200);

                    b.Property<string>("DriverTotal")
                        .HasMaxLength(5);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<string>("HmFlag")
                        .HasMaxLength(1);

                    b.Property<string>("LegalName")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Mcs150Date")
                        .HasColumnType("date");

                    b.Property<string>("Mcs150Mileage")
                        .HasMaxLength(20);

                    b.Property<string>("Mcs150MileageYear")
                        .HasMaxLength(6);

                    b.Property<string>("NbrPowerUnit")
                        .HasMaxLength(5);

                    b.Property<string>("PcFlag")
                        .HasMaxLength(1);

                    b.Property<string>("PhyCity")
                        .HasMaxLength(50);

                    b.Property<string>("PhyContry")
                        .HasMaxLength(7);

                    b.Property<string>("PhyState")
                        .HasMaxLength(30);

                    b.Property<string>("PhyStreet")
                        .HasMaxLength(200);

                    b.Property<string>("PhyZip")
                        .HasMaxLength(20);

                    b.Property<string>("Telephone")
                        .HasMaxLength(25);

                    b.HasKey("DotNumber");

                    b.ToTable("UsDot","AC");
                });

            modelBuilder.Entity("BAv02.Models.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("FileImage")
                        .HasMaxLength(50);

                    b.Property<string>("FileSignature")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<bool?>("Hazmat");

                    b.Property<bool?>("Ia");

                    b.Property<long?>("IdInquiry");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.Property<string>("Position")
                        .HasMaxLength(50);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<Guid?>("TokenCode");

                    b.HasKey("Id");

                    b.ToTable("Users","AC");
                });

            modelBuilder.Entity("BAv02.Models.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("money");

                    b.Property<string>("Engine")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ExpNumber")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpTwic")
                        .HasColumnType("datetime");

                    b.Property<string>("FileImage")
                        .HasMaxLength(50);

                    b.Property<string>("FuelType")
                        .HasMaxLength(20);

                    b.Property<bool?>("Hazmat");

                    b.Property<long?>("IdCompany");

                    b.Property<DateTime?>("InServiceDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InsuranceExpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("InsuranceName")
                        .HasMaxLength(100);

                    b.Property<string>("Make")
                        .HasMaxLength(50);

                    b.Property<string>("Miles")
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .HasMaxLength(50);

                    b.Property<string>("OperationRadius")
                        .HasMaxLength(7);

                    b.Property<string>("OtherInsurance")
                        .HasMaxLength(100);

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("PlateExpiration")
                        .HasColumnType("datetime");

                    b.Property<long?>("PlateState");

                    b.Property<string>("PolicyTerm")
                        .HasMaxLength(20);

                    b.Property<string>("PortEntry")
                        .HasMaxLength(100);

                    b.Property<string>("Sct")
                        .HasColumnName("SCT")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Sctexpiration")
                        .HasColumnName("SCTExpiration")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(15);

                    b.Property<int?>("TireSize");

                    b.Property<string>("Twic")
                        .HasMaxLength(20);

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("VerificationNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("Weight");

                    b.Property<string>("Year")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("Vehicle","MT");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspection", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("idVehicleInspection");

                    b.Property<DateTime>("DateDue");

                    b.Property<long?>("IdCompany")
                        .HasColumnName("idCompany");

                    b.Property<long?>("IdUser")
                        .HasColumnName("idUser");

                    b.Property<long?>("IdVehicle")
                        .HasColumnName("idVehicle");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InspectionMeets")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InspectionName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InspectionType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("InspectorSignature")
                        .HasMaxLength(50);

                    b.Property<string>("TireSize")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VehicleType")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("VehicleInspection","MT");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionBodyShop", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdUser");

                    b.Property<long?>("IdVehicleInspection");

                    b.Property<string>("WindShieldGlazing")
                        .HasColumnName("WindShield_Glazing")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WindShieldWipersOtherStatus")
                        .HasColumnName("WindShield_Wipers_OtherStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WindShieldWipersStatus")
                        .HasColumnName("WindShield_Wipers_Status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("VehiculeInspectionBodyShop","MT");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionBrake", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("AirCompressor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrakeDrums")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrakeHose")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BrakeTubing")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HydraulicBrakes")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdUser");

                    b.Property<long?>("IdVehicleInspection");

                    b.Property<string>("LowPressure")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ParkingBrakeSystem")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ServiceBrakes")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TractorProtection")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VaccumSystem")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("VehicleInspectionBrakes","MT");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionElectrical", b =>
                {
                    b.Property<long>("idElectrical")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllLightDevices")
                        .HasMaxLength(50);

                    b.Property<string>("HeadStop")
                        .HasMaxLength(50);

                    b.Property<string>("Starter")
                        .HasMaxLength(50);

                    b.Property<string>("Tacnograph")
                        .HasMaxLength(50);

                    b.Property<string>("TailDash")
                        .HasMaxLength(50);

                    b.Property<string>("TurnIndications")
                        .HasMaxLength(50);

                    b.Property<long?>("idCompany");

                    b.Property<long?>("idUser");

                    b.Property<long?>("idVehicleInspection");

                    b.HasKey("idElectrical");

                    b.ToTable("MT.VehicleInspectionElectrical");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionFuelSystem", b =>
                {
                    b.Property<long>("idFuelSystem");

                    b.Property<string>("FuelTankFilter")
                        .HasMaxLength(50);

                    b.Property<string>("FuelTankSecurely")
                        .HasMaxLength(50);

                    b.Property<string>("VisibleLeak")
                        .HasMaxLength(50);

                    b.Property<long?>("idCompany");

                    b.Property<long?>("idUser");

                    b.Property<long?>("idVehicleInspection");

                    b.HasKey("idFuelSystem");

                    b.ToTable("MT.VehicleInspectionFuelSystem");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionHeating", b =>
                {
                    b.Property<long>("Id")
                        .HasMaxLength(10);

                    b.Property<string>("Compressor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FaultyGasket")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FlushingContaminated")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdUser");

                    b.Property<long?>("IdVehicleInspection");

                    b.Property<string>("Leaks")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MagneticClutch")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Refrigerant")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SystemRecharging")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WornHose")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("VehicleInspectionHeating","MT");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionMechanical", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("ExhaustedSystem")
                        .HasMaxLength(10);

                    b.Property<string>("FifthWheels")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdUser");

                    b.Property<long?>("IdVehicleInspection");

                    b.Property<string>("PrintieHooks")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SaddleMounts")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SafetyDevices")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("VehicleInspectionMechanical","MT");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionSafe", b =>
                {
                    b.Property<long>("idSafe");

                    b.Property<string>("FireExtingrisher")
                        .HasMaxLength(50);

                    b.Property<string>("FlagsFlares")
                        .HasMaxLength(50);

                    b.Property<string>("PatsVehicleConditions")
                        .HasMaxLength(50);

                    b.Property<string>("Protection")
                        .HasMaxLength(50);

                    b.Property<string>("SpareBulbs")
                        .HasMaxLength(50);

                    b.Property<string>("SpareSealBeam")
                        .HasMaxLength(50);

                    b.Property<long?>("idCompany");

                    b.Property<long?>("idUser");

                    b.Property<long?>("idVehicleInspection");

                    b.HasKey("idSafe");

                    b.ToTable("MT.VehicleInspectionSafe");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionSteeringMechanism", b =>
                {
                    b.Property<long>("idSteeringMechanism");

                    b.Property<string>("BallDragLinks")
                        .HasMaxLength(50);

                    b.Property<string>("FrontAxleBean")
                        .HasMaxLength(50);

                    b.Property<string>("Nuts")
                        .HasMaxLength(50);

                    b.Property<string>("PitmanSteering")
                        .HasMaxLength(50);

                    b.Property<string>("SteeringColumn")
                        .HasMaxLength(50);

                    b.Property<string>("SteeringGearBox")
                        .HasMaxLength(50);

                    b.Property<string>("SteeringSystem")
                        .HasMaxLength(50);

                    b.Property<string>("TieRodsDragLinks")
                        .HasMaxLength(50);

                    b.Property<string>("WheelFreePlay")
                        .HasMaxLength(50);

                    b.Property<long?>("idCompany");

                    b.Property<long?>("idUser");

                    b.Property<long?>("idVehicleInspection");

                    b.HasKey("idSteeringMechanism");

                    b.ToTable("MT.VehicleInspectionSteeringMechanism");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionSuspension", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("AxlePositioning")
                        .HasMaxLength(50);

                    b.Property<long?>("IdCompany");

                    b.Property<long?>("IdUser");

                    b.Property<long?>("IdVehicleInspection");

                    b.Property<string>("SpringAssembly")
                        .HasMaxLength(50);

                    b.Property<string>("TurqueRadius")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MT.VehicleInspectionSuspension");
                });

            modelBuilder.Entity("BAv02.Models.VehicleInspectionTire", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("AdjustableAxle")
                        .HasMaxLength(50);

                    b.Property<string>("AllOtherTires")
                        .HasMaxLength(50);

                    b.Property<string>("Fasteners")
                        .HasMaxLength(50);

                    b.Property<string>("FrameMembers")
                        .HasMaxLength(50);

                    b.Property<long?>("IdUser");

                    b.Property<string>("Sidering")
                        .HasMaxLength(50);

                    b.Property<string>("TireWheelsClearance")
                        .HasMaxLength(50);

                    b.Property<long?>("TiresPowerUnit");

                    b.Property<string>("Welds")
                        .HasMaxLength(50);

                    b.Property<string>("WheelsAndRims")
                        .HasMaxLength(50);

                    b.Property<long?>("idCompany");

                    b.Property<long?>("idVehicleInspection");

                    b.HasKey("Id");

                    b.ToTable("MT.VehicleInspectionTires");
                });

            modelBuilder.Entity("BAv02.Models.Violations", b =>
                {
                    b.Property<long>("IdViolation")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BasicDesc")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("GroupDesc")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("InspDate")
                        .HasColumnType("date");

                    b.Property<string>("OosIndicator")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<byte>("OosWeight");

                    b.Property<string>("SectionDesc")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<byte>("SeverityWeight");

                    b.Property<string>("Status")
                        .HasMaxLength(15);

                    b.Property<byte>("TotalserverityWght");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ViolCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ViolUnit")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("IdViolation");

                    b.ToTable("Violations","MT");
                });

            modelBuilder.Entity("BAv02.Models.WorkOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateNext")
                        .HasColumnType("date");

                    b.Property<bool?>("ExternalServices");

                    b.Property<long>("IdCompany");

                    b.Property<long>("IdVehicle");

                    b.Property<string>("InspectionDue")
                        .HasMaxLength(60);

                    b.Property<long>("IssuedBy");

                    b.Property<string>("MileageTime")
                        .HasMaxLength(40);

                    b.Property<string>("MileageType")
                        .HasMaxLength(40);

                    b.Property<string>("ServiceType")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("VehicleType")
                        .HasMaxLength(15);

                    b.Property<string>("WorkRequest")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.ToTable("WorkOrder","MT");
                });

            modelBuilder.Entity("BAv02.Models.AccidentRegister", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("AccidentRegister")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__AccidentR__IdCom__2B947552");

                    b.HasOne("BAv02.Models.Driver", "IdNavigation")
                        .WithMany("AccidentRegister")
                        .HasForeignKey("IdDriver")
                        .HasConstraintName("FK__AccidentR__IdDri__2E70E1FD");
                });

            modelBuilder.Entity("BAv02.Models.CargoClassification", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("CargoClassification")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__CargoClas__IdCom__55BFB948");
                });

            modelBuilder.Entity("BAv02.Models.CertificateEnrollment", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("CertificateEnrollment")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__Certifica__IdCom__382F5661");
                });

            modelBuilder.Entity("BAv02.Models.CompanyAlerts", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("CompanyAlerts")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__CompanyAl__IdCom__5C6CB6D7");
                });

            modelBuilder.Entity("BAv02.Models.CompanyDocs", b =>
                {
                    b.HasOne("BAv02.Models.AccidentRegister", "IdAccidentRegisterNavigation")
                        .WithMany("CompanyDocs")
                        .HasForeignKey("IdAccidentRegister")
                        .HasConstraintName("FK__CompanyDo__IdAcc__2F650636");
                });

            modelBuilder.Entity("BAv02.Models.CompanyUsersRoles", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("CompanyUsersRoles")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__Relations__idCom__787EE5A0");
                });

            modelBuilder.Entity("BAv02.Models.DrugTest", b =>
                {
                    b.HasOne("BAv02.Models.DrugAlcoholCompliance", "IdDrugAlcoholComplianceNavigation")
                        .WithMany("DrugTest")
                        .HasForeignKey("IdDrugAlcoholCompliance")
                        .HasConstraintName("FK__DrugTest__IdDrug__1B29035F");

                    b.HasOne("BAv02.Models.ScheduleDrugTest", "IdScheduleDrugTestNavigation")
                        .WithMany("DrugTest")
                        .HasForeignKey("IdScheduleDrugTest")
                        .HasConstraintName("FK__DrugTest__IdSche__1A34DF26");
                });

            modelBuilder.Entity("BAv02.Models.EmployerPullNotice", b =>
                {
                    b.HasOne("BAv02.Models.Driver", "IdNavigation")
                        .WithMany("EmployerPullNotice")
                        .HasForeignKey("IdDriver")
                        .HasConstraintName("FK__EmployerP__IdDri__370627FE")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BAv02.Models.HazardMaterialCompany", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("HazardMaterialCompany")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK_HazardMaterialCompany_Company");

                    b.HasOne("BAv02.Models.HazardMaterial", "IdHazardMaterialNavigation")
                        .WithMany("HazardMaterialCompany")
                        .HasForeignKey("IdHazardMaterial")
                        .HasConstraintName("FK_HazardMaterialCompany_HazardMaterial");
                });

            modelBuilder.Entity("BAv02.Models.HazardMaterialOptions", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("HazardMaterialOptions")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__HazardMat__IdCom__7FB5F314");
                });

            modelBuilder.Entity("BAv02.Models.HazardMaterialStates", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("HazardMaterialStates")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__HazardMat__IdCom__084B3915");
                });

            modelBuilder.Entity("BAv02.Models.Material", b =>
                {
                    b.HasOne("BAv02.Models.WorkOrder", "IdWorkOrderNavigation")
                        .WithMany("Material")
                        .HasForeignKey("IdWorkOrder")
                        .HasConstraintName("FK__Material__IdWork__0B5CAFEA")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BAv02.Models.OperationClassification", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("OperationClassification")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__Operation__IdCom__53D770D6");
                });

            modelBuilder.Entity("BAv02.Models.Reaaddress", b =>
                {
                    b.HasOne("BAv02.Models.DriverAddress", "IdDaddressNavigation")
                        .WithMany("Reaaddress")
                        .HasForeignKey("IdDaddress")
                        .HasConstraintName("FK__REAAddres__idDAd__251C81ED");

                    b.HasOne("BAv02.Models.EmploymentApplication", "IdEmploymentAplicationNavigation")
                        .WithMany("Reaaddress")
                        .HasForeignKey("IdEmploymentAplication")
                        .HasConstraintName("FK__REAAddres__idEAp__24285DB4");
                });

            modelBuilder.Entity("BAv02.Models.Readexperience", b =>
                {
                    b.HasOne("BAv02.Models.DrivingExperience", "IdDrivingExperienceNavigation")
                        .WithMany("Readexperience")
                        .HasForeignKey("IdDrivingExperience")
                        .HasConstraintName("FK__READExper__idDEx__214BF109");

                    b.HasOne("BAv02.Models.EmploymentApplication", "IdEmploymentAplicationNavigation")
                        .WithMany("Readexperience")
                        .HasForeignKey("IdEmploymentAplication")
                        .HasConstraintName("FK__READExper__idEAp__2057CCD0");
                });

            modelBuilder.Entity("BAv02.Models.Reaerecords", b =>
                {
                    b.HasOne("BAv02.Models.EmploymentApplication", "IdEmploymentAplicationNavigation")
                        .WithMany("Reaerecords")
                        .HasForeignKey("IdEmploymentAplication")
                        .HasConstraintName("FK__REAERecor__idEAp__2F9A1060");

                    b.HasOne("BAv02.Models.EmploymentRecords", "IdEmploymentRecordsNavigation")
                        .WithMany("Reaerecords")
                        .HasForeignKey("IdEmploymentRecords")
                        .HasConstraintName("FK__REAERecor__idERe__308E3499");
                });

            modelBuilder.Entity("BAv02.Models.Rearaccident", b =>
                {
                    b.HasOne("BAv02.Models.AccidentRecord", "IdDraccidentNavigation")
                        .WithMany("Rearaccident")
                        .HasForeignKey("IdDraccident")
                        .HasConstraintName("FK__REARAccid__idDRA__28ED12D1");

                    b.HasOne("BAv02.Models.EmploymentApplication", "IdEmploymentAplicationNavigation")
                        .WithMany("Rearaccident")
                        .HasForeignKey("IdEmploymentAplication")
                        .HasConstraintName("FK__REARAccid__idEAp__27F8EE98");
                });

            modelBuilder.Entity("BAv02.Models.Reatconvictions", b =>
                {
                    b.HasOne("BAv02.Models.EmploymentApplication", "IdEaplicationNavigation")
                        .WithMany("Reatconvictions")
                        .HasForeignKey("IdEaplication")
                        .HasConstraintName("FK__REATConvi__idEAp__2BC97F7C");

                    b.HasOne("BAv02.Models.TrafficConvictions", "IdTrafficConvictionsNavigation")
                        .WithMany("Reatconvictions")
                        .HasForeignKey("IdTrafficConvictions")
                        .HasConstraintName("FK__REATConvi__idTCo__2CBDA3B5");
                });

            modelBuilder.Entity("BAv02.Models.RoadTest", b =>
                {
                    b.HasOne("BAv02.Models.Driver", "IdNavigation")
                        .WithMany("RoadTest")
                        .HasForeignKey("IdDriver")
                        .HasConstraintName("FK__RoadTest__idDriv__0A688BB1");
                });

            modelBuilder.Entity("BAv02.Models.ScheduleDrugTest", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("ScheduleDrugTest")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__ScheduleD__IdCom__4277DAAA");

                    b.HasOne("BAv02.Models.Driver", "IdNavigation")
                        .WithMany("ScheduleDrugTest")
                        .HasForeignKey("IdDriver")
                        .HasConstraintName("FK__ScheduleD__Donor__4183B671");
                });

            modelBuilder.Entity("BAv02.Models.Service", b =>
                {
                    b.HasOne("BAv02.Models.WorkOrder", "IdWorkOrderNavigation")
                        .WithMany("Service")
                        .HasForeignKey("IdWorkOrder")
                        .HasConstraintName("FK__Service__IdWorkO__01D345B0")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BAv02.Models.SupervisorTraining", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("SupervisorTraining")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__Superviso__IdCom__3DE82FB7");
                });

            modelBuilder.Entity("BAv02.Models.WorkOrder", b =>
                {
                    b.HasOne("BAv02.Models.Company", "IdCompanyNavigation")
                        .WithMany("WorkOrder")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK__WorkOrder__IdCom__7EF6D905")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
